import type { Metadata } from 'next';
import {NextIntlClientProvider} from 'next-intl';
import {getMessages, unstable_setRequestLocale} from 'next-intl/server';
import {notFound} from 'next/navigation'; // Ensure notFound is imported
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import '../globals.css'; // Relative path to src/app/globals.css
import { Toaster } from "@/components/ui/toaster";

const locales = ['en', 'es'];

export function generateStaticParams() {
  return locales.map((locale) => ({locale}));
}

export async function generateMetadata({params: {locale}}: {params: {locale: string}}): Promise<Metadata> {
  if (!locales.includes(locale)) notFound(); // Validate locale
  // For a dynamic title, you could load messages here.
  // const messages = await getMessages({locale});
  // const t = createTranslator({locale, messages});
  // return { title: t('LocaleLayout.title') };
  
  return {
    title: 'The Big Day', 
    description: 'Our Wedding Website', 
  };
}

export default async function LocaleLayout({
  children,
  params: {locale}
}: Readonly<{
  children: React.ReactNode;
  params: {locale: string};
}>) {
  // Validate and set the locale for server-side rendering.
  // This MUST be the first line in the component.
  if (!locales.includes(locale)) notFound();
  unstable_setRequestLocale(locale); 

  // Providing all messages to the client side is a good default.
  const messages = await getMessages();

  return (
    <html lang={locale} suppressHydrationWarning>
      <head>
        {/* Metadata is now generated by generateMetadata */}
      </head>
      <body className={`${GeistSans.variable} ${GeistMono.variable} antialiased`} suppressHydrationWarning>
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
          <Toaster />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
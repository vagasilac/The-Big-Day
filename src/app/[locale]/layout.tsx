import type { Metadata } from 'next';
import {NextIntlClientProvider} from 'next-intl';
import {getMessages, unstable_setRequestLocale} from 'next-intl/server';
import {notFound} from 'next/navigation'; 
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import '../globals.css'; // Relative path to src/app/globals.css
import { Toaster } from "@/components/ui/toaster";

const locales = ['en', 'es'];

export function generateStaticParams() {
  return locales.map((locale) => ({locale}));
}

export async function generateMetadata({params: {locale}}: {params: {locale: string}}): Promise<Metadata> {
  // Validate locale for metadata generation
  if (!locales.includes(locale)) {
    notFound();
  }
  // unstable_setRequestLocale(locale); // Not strictly needed here if not using getMessages/getTranslations directly for metadata
  
  // Example for dynamic title (if you had translations for it)
  // try {
  //   const messages = await getMessages({ locale }); // Fetch messages for this specific locale
  //   const t = createTranslator({locale, messages}); // You'd need to import createTranslator
  //   return { title: t('LocaleLayout.title') }; // Example key
  // } catch (error) {
  //   console.error(`Failed to load messages for metadata (locale: ${locale}):`, error);
  // }
  
  return {
    title: 'The Big Day', 
    description: 'Our Wedding Website', 
  };
}

export default async function LocaleLayout({
  children,
  params: {locale}
}: Readonly<{
  children: React.ReactNode;
  params: {locale: string};
}>) {
  // Validate and set the locale for server-side rendering.
  // This MUST be the first line in the component if using locale in generateMetadata or elsewhere.
  if (!locales.includes(locale)) {
    notFound();
  }
  unstable_setRequestLocale(locale); 

  // Providing all messages to the client side is a good default.
  let messages;
  try {
    messages = await getMessages(); // This should now work correctly after unstable_setRequestLocale
  } catch (error) {
    console.error('Failed to load messages in LocaleLayout:', error);
    // Handle error appropriately, maybe show a fallback or trigger notFound
    // For now, we'll let it proceed and potentially error in NextIntlClientProvider if messages are undefined
    // or provide empty messages as a fallback
    messages = {}; 
  }
  

  return (
    <html lang={locale} suppressHydrationWarning>
      <head>
        {/* Metadata is now generated by generateMetadata */}
      </head>
      <body className={`${GeistSans.variable} ${GeistMono.variable} antialiased`} suppressHydrationWarning>
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
          <Toaster />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
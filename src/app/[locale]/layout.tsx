import type { Metadata } from 'next';
import {NextIntlClientProvider} from 'next-intl';
import {getMessages, unstable_setRequestLocale} from 'next-intl/server';
import {notFound} from 'next/navigation'; 
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import '../globals.css'; // Relative path to src/app/globals.css
import { Toaster } from "@/components/ui/toaster";

const locales = ['en', 'es'];

export function generateStaticParams() {
  return locales.map((locale) => ({locale}));
}

export async function generateMetadata({params: {locale}}: {params: {locale: string}}): Promise<Metadata> {
  // Validate locale first
  if (!locales.includes(locale)) {
    notFound();
  }
  // It's good practice to also setRequestLocale here if needed by getMessages in metadata context,
  // though getMessages in the layout component itself is more common for the provider.
  // For now, we rely on the layout's unstable_setRequestLocale call.
  
  // Example: If you wanted to use translations in metadata (requires messages)
  // unstable_setRequestLocale(locale); // Call if getMessages is used here
  // const messages = await getMessages();
  // const t = createTranslator({locale, messages}); // Helper if needed, or access directly

  return {
    title: 'The Big Day', // Static for now, or use t('metadata.title') if translated
    description: 'Our Wedding Website', // Static for now, or use t('metadata.description')
  };
}

export default async function LocaleLayout({
  children,
  params: {locale}
}: Readonly<{
  children: React.ReactNode;
  params: {locale: string};
}>) {
  // Validate that the incoming `locale` parameter is valid
  if (!locales.includes(locale)) {
    notFound();
  }

  // This MUST be called before an functions from next-intl (e.g. getMessages)
  // are used in a Server Component.
  unstable_setRequestLocale(locale); 

  let messages;
  try {
    // Providing all messages to the client side is a good default.
    // getMessages() will now use the locale set by unstable_setRequestLocale.
    messages = await getMessages(); 
  } catch (error) {
    console.error(`Failed to load messages for locale "${locale}" in LocaleLayout:`, error);
    // Handle error appropriately, maybe show a fallback or trigger notFound
    // For now, we'll let it proceed and potentially error in NextIntlClientProvider if messages are undefined
    // or provide empty messages as a fallback
    messages = {}; 
    // Alternatively, to be more strict:
    // notFound();
  }
  

  return (
    <html lang={locale} suppressHydrationWarning>
      <head>
        {/* Metadata is now generated by generateMetadata */}
      </head>
      <body className={`${GeistSans.variable} ${GeistMono.variable} antialiased`} suppressHydrationWarning>
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
          <Toaster />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
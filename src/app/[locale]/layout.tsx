
import type { Metadata } from 'next';
import {NextIntlClientProvider} from 'next-intl';
import {getMessages, unstable_setRequestLocale} from 'next-intl/server';
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import '../globals.css'; // This path is relative to src/app/[locale]/
import { Toaster } from "@/components/ui/toaster";

// Ensure this matches the locales in your i18n.ts and middleware.ts
export function generateStaticParams() {
  return [{locale: 'en'}, {locale: 'es'}];
}

export async function generateMetadata({params: {locale}}: {params: {locale: string}}): Promise<Metadata> {
  // Optionally, load translated metadata if needed.
  // For now, using static metadata.
  // const messages = await getMessages({ locale }); // You could use this if your title needs translation
  // const t = createTranslator({locale, messages});
  // return { title: t('LocaleLayout.title') };
  return {
    title: 'The Big Day',
    description: 'Our Wedding Website',
  };
}

export default async function LocaleLayout({
  children,
  params: {locale}
}: Readonly<{
  children: React.ReactNode;
  params: {locale: string};
}>) {
  // Enable static rendering
  unstable_setRequestLocale(locale);

  // Providing all messages to the client
  // side is a good default.
  const messages = await getMessages();

  return (
    <html lang={locale} suppressHydrationWarning>
      <head>
        {/* Metadata is now generated by generateMetadata */}
      </head>
      <body className={`${GeistSans.variable} ${GeistMono.variable} antialiased`} suppressHydrationWarning>
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
          <Toaster />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

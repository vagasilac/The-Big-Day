
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Weddings collection:
    match /weddings/{weddingId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid
                    && request.resource.data.slug is string
                    && request.resource.data.title is string
                    && request.resource.data.templateId is string;
      
      match /guests/{guestId} {
        allow read, create, update, delete: if request.auth != null && get(/databases/$(database)/documents/weddings/$(weddingId)).data.userId == request.auth.uid;
      }
    }

    // VenueLayouts collection:
    match /venueLayouts/{layoutId} {
      allow read: if request.auth != null && 
                     (resource.data.ownerId == request.auth.uid || resource.data.isPublic == true);
      allow create: if request.auth != null 
                      && request.resource.data.ownerId == request.auth.uid
                      && request.resource.data.name is string
                      && request.resource.data.name.size() > 0
                      && request.resource.data.tables is list
                      && request.resource.data.totalCapacity is number
                      && request.resource.data.isPublic == false; // User-created layouts must be private initially
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
                      // Owner can update all fields, including isPublic.
                      // Add more granular checks if needed:
                      // e.g. && (request.resource.data.isPublic == resource.data.isPublic || canSetPublic())
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
